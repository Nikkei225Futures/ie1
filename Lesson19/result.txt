Lesson19 課題1-4プログラム MyHashtable.java
public class MyHashtable {
    //フィールド
    private AddressData[] table;
    private int collision = 0;

    //コンストラクタ
    private MyHashtable() {
    
    }
    
    public MyHashtable(int aMaxSize) {
        this.table = new AddressData[aMaxSize];
    }
    
    //メソッド
    public AddressData get(String aKey) {
        if (null == aKey) {
            throw new NullPointerException(); // 鍵がnull
        }
        // ハッシュ値を計算してデータを取得する
        return this.table[this.calculateHashCode(aKey)];
    }
    
    public void printAll() {
        // テーブルの内容を順番に全て表示
        for (int count = 0; count < this.table.length; count++) {
            System.out.println(count + "\t" + this.table[count]);   //¥t -> \t に変更
        }

        System.out.println();
    }

    public boolean put(AddressData anAddressData) {
        if (null == anAddressData) {
            return false;//データがnull
        }
      
        //課題2
        int argAddr = this.calculateHashCode(anAddressData.getName());
        if(this.table[argAddr] != null){
            this.collision++;
        }
        //

        this.table[this.calculateHashCode(anAddressData.getName())] = anAddressData;
        return true;
    }
    
    public boolean remove(String aKey) {
        if (null == aKey) {
            return false;
        }
        this.table[this.calculateHashCode(aKey)] = null;
        return true;
    }

    private int calculateHashCode(String aKey) {
        // 鍵がnull であるか調べる
        if (null == aKey) {
            // 鍵がnull なので例外を報告して処理を抜ける
            throw new NullPointerException();
        }
        
        // 文字列の各文字をUnicode 数値として扱い、足し合わせる
        int intKey = 0;
        for (int count = 0; count < aKey.length(); count++) {
            intKey += 0xffff & aKey.charAt(count);
        }
        // 合計値からハッシュ値を求める
        return intKey % this.table.length;
    }

    //課題1
    public int size(){
        int size = 0;
        for(int i = 0; i < this.table.length; i++){
            if(this.table[i] != null){
                size++;
            }
        }
        return size;
    }

    public void clear(){
        for(int i = 0; i < this.table.length; i++){
            this.table[i] = null;
        }
    }

    //課題2
    public int getCollision() {
        return this.collision;
    }

    //課題3
    public void search(String aKey){
        //aKeyがnull
        if(aKey.equals(null)){
            System.out.println("Key is null");
            throw new NullPointerException();
        }

        //search
        int argAddr = this.calculateHashCode(aKey);

        if(this.table[argAddr] == null){
            System.out.println(aKey + " does not exists.");
        
        }else if(this.table[argAddr].getName().equals(aKey)){
            System.out.println(aKey + " exists.");
            System.out.println("Data: " + this.table[argAddr].toString());
        
        }else if(!(this.table[argAddr].getName().equals(aKey))){
            System.out.println(aKey + "does not exists.");
        }

    }
    
}

課題1 結果
G:\programing\java\Lesson19>java Lesson19_1
------------ MyHashtable ------------
0       Takahashi: Yoshida Lab, M1, A309
1       Oki: Takata Lab, M2, A355
2       null
3       Tochikawa: Takeuchi Lab, M1, A501
4       Takeuchi: Takeuchi Lab, Teacher, A501
5       null
6       Nakamura: Fukumoto Lab, M2, A357
7       Onoda: Fukumoto Lab, M1, A357
8       Mendori: Mendori Lab, Teacher, A307
9       null

Number of added elements: 10
Number of elements in the hashtable: 7

------------ MyHashtable ------------
0       null
1       null
2       null
3       null
4       null
5       null
6       null
7       null
8       null
9       null

Number of elements in the hashtable: 0

課題2 結果
G:\programing\java\Lesson19>java Lesson19_2
------------- MyHashtable1 -------------
0       Takahashi: Yoshida Lab, M1, A309
1       Oki: Takata Lab, M2, A355
2       null
3       Tochikawa: Takeuchi Lab, M1, A501
4       Takeuchi: Takeuchi Lab, Teacher, A501
5       null
6       Nakamura: Fukumoto Lab, M2, A357
7       Onoda: Fukumoto Lab, M1, A357
8       Mendori: Mendori Lab, Teacher, A307
9       null

Number of added elements: 10
Collision times: 3

---------- (check)MyHashtable2 ----------
Size of the hashtable: 10007
Number of added elements: 7000
Number of elements in the hashtable: 1767
Collision times: 5233

課題3 結果
G:\programing\java\Lesson19>java Lesson19_3
------------ MyHashtable ------------
0       Takahashi: Yoshida Lab, M1, A309
1       Oki: Takata Lab, M2, A355
2       null
3       Tochikawa: Takeuchi Lab, M1, A501
4       Takeuchi: Takeuchi Lab, Teacher, A501
5       null
6       Nakamura: Fukumoto Lab, M2, A357
7       Onoda: Fukumoto Lab, M1, A357
8       Mendori: Mendori Lab, Teacher, A307
9       null

Takahashi exists.
Data: Takahashi: Yoshida Lab, M1, A309

Isobedoes not exists.

KUTinfo does not exists.

Exception in thread "main" java.lang.NullPointerException
        at MyHashtable.search(MyHashtable.java:98)
        at Lesson19_3.main(Lesson19_3.java:27)


課題4 結果
サイズ100, 要素数100の場合  (サイズ:要素数 = 1:1)
衝突回数:           35
検索時間(ハッシュ): 4.4488ms
検索時間(配列):     19.4956ms

サイズ500, 要素数100の場合  (サイズ:要素数 = 5:1)
衝突回数:           5
検索時間(ハッシュ): 9.0219ms
検索時間(配列):     30.354ms

サイズ1000, 要素数1000の場合(サイズ:要素数 = 1:1)
衝突回数:           376
検索時間(ハッシュ): 9.1187ms
検索時間(配列):     75.3756ms

サイズ1000, 要素数500の場合 (サイズ:要素数 = 2:1)
衝突回数:           107
検索時間(ハッシュ): 11.5347ms
検索時間(配列):     83.4424ms

サイズ1000, 要素数300の場合 (サイズ:要素数 = 10:3)
衝突回数:           45
検索時間(ハッシュ): 3.8288ms
検索時間(配列):     70.4874ms

サイズ1000, 要素数100の場合 (サイズ:要素数 = 10:1)
衝突回数:           6
検索時間(ハッシュ): 5.1425ms
検索時間(配列):     34.4093ms

サイズ10000, 要素数100の場合 (サイズ:要素数 = 100:1)
衝突回数:           3
検索時間(ハッシュ): 5.9505ms
検索時間(配列):     242.5996ms

1.
ハッシュテーブルおいては、サイズが増加しても検索時間はほぼ横ばいで変わらない
また、要素数がサイズに近づけば近づくほど、衝突回数が増加した
検索時間がほぼ変化しない理由としては、検索をする際に検索対象のハッシュを用いてアドレスを指定して検索するためだと考えた。
また、サイズ/要素数の比率が小さくなるほど衝突回数が増加する理由としては、各文字を足し合わせて"サイズで割った余り"がハッシュになるため、サイズ/要素数の比率が小さい(アドレスに空きがない)ほど衝突回数が必然的に増えるためだと考えた。

2.
ハッシュテーブルの計算時間はサイズによって余り変化しなかった
また、配列ではサイズが大きくなるほど計算時間が増えた。
配列では先頭からfor文を使用して検索をしているので、サイズが大きくなるほどif文を実行する回数が増えるため、このような結果になったと考えた。
また、ハッシュテーブルでは任意の文字列を探す際に、探す文字列のハッシュをアドレスとしているので、forやwhile文を使用しないで検索することが出来るため、ほぼ一定の時間で検索できる。
このように配列ではサイズが大きくなるにつれて検索時間も大きくなるが、ハッシュはサイズが増えても検索時間は一定となるため、このような差が出来たと考えた。