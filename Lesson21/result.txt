課題1 プログラム OriginalShellSort.java
class OriginalShellSort {
    // フィールド
    private int[] sort_array;

    // コンストラクタ
    private OriginalShellSort() {

    }

    public OriginalShellSort(int[] sort_array) {
        this.sort_array = sort_array;
    }

    // メソッド
    public void display() {
        for (int i = 0; i < this.sort_array.length; i++)
            System.out.print(this.sort_array[i] + " ");
        System.out.println();
    }

    public void shellSort() {
        int in, out, temp, h;
        h = 1;
        while (h < this.sort_array.length / 2)
            h = 2 * h; // original interval sequence
        while (h > 0) {
            //System.out.println("h = " + h);
            // 動作確認用
            for (out = h; out < this.sort_array.length; out++) {
                temp = this.sort_array[out];
                in = out;
                while (in > h - 1 && this.sort_array[in - h] > temp) {
                    this.sort_array[in] = this.sort_array[in - h];
                    in -= h; // in = in –h;
                }
                this.sort_array[in] = temp;
                //this.display(); // 動作確認用
            }
            h = (h - 1) / 2;
            // original interval sequence
        }
    }
}

結果1
G:\programing\java\Lesson21>java Lesson21_1
=== ascending  =============================
[0, 6, 12, 15, 24, 33, 41, 43, 45, 49]
- InsertionSortX -
0 6 12 15 24 33 41 43 45 49
- ShellSort -
0 6 12 15 24 33 41 43 45 49
- OriginalShellSort -
0 6 12 15 24 33 41 43 45 49
=== descending =============================
[44, 37, 34, 34, 34, 27, 26, 17, 9, 0]
- InsertionSortX -
0 9 17 26 27 34 34 34 37 44
- ShellSort -
0 9 17 26 27 34 34 34 37 44
- OriginalShellSort -
0 9 17 26 27 34 34 34 37 44
=== random     =============================
[16, 9, 24, 26, 3, 5, 18, 7, 19, 6]
- InsertionSortX -
3 5 6 7 9 16 18 19 24 26
- ShellSort -
3 5 6 7 9 16 18 19 24 26
- OriginalShellSort -
3 5 6 7 9 16 18 19 24 26

------------------

(各クラス共通の部分)
//課題2　フィールド
private int assignCount = 0;
private int compareCount = 0;

//課題3 フィールド
protected long timeStart;
protected long timeStop;

//課題2 メソッド
    protected int compareValue(int n1, int n2) {
        this.compareCount++;
        if (n1 > n2) {
            return 1;
        } else if (n1 < n2) {
            return -1;
        } else {
            return 0;
        }
    }

    public int getAssignCount(){
        return this.assignCount;
    }

    public int getCompareCount(){
        return this.compareCount;
    }

    public boolean checkSort(){
        for(int i = 1; i < this.sort_array.length; i++){
            if(this.sort_array[i] < this.sort_array[i-1]){
                return false;
            }
        }
        return true;
    }

    //課題3 メソッド
    public void startTimer(){
        this.timeStart = System.nanoTime();
    }

    public void stopTimer(){
        this.timeStop = System.nanoTime();
    }

    public long getSortTime(){
        return this.timeStop - this.timeStart;
    }

(各クラスのソートメソッド)
InsertionSortX.java InsertionSortXメソッド
    public void insertionSortX() {
        int in, out, temp;
        for (out = 1; out < this.sort_array.length; out++) {
            temp = this.sort_array[out];
            this.assignCount++;
            in = out;
            // もし
            //while (in > 0 && this.sort_array[in - 1] > temp) {
            while(in > 0 && this.compareValue(this.sort_array[in - 1], temp) == 1){
                this.sort_array[in] = this.sort_array[in - 1];
                this.assignCount++;
                in--;
            }
            this.sort_array[in] = temp;
            this.assignCount++;
            //this.display();
            // 動作確認用
        }
    }

ShellSort.java ShellSortメソッド
    public void shellSort() {
        int in, out, temp, h;
        h = 1;
        while (h < this.sort_array.length / 3)
            h = h * 3 + 1; // Knuth's interval sequence
        while (h > 0) {
            //System.out.println("h = " + h);
            // 動作確認用
            for (out = h; out < this.sort_array.length; out++) {
                temp = this.sort_array[out];
                this.assignCount++;
                in = out;
                //while (in > h - 1 && this.sort_array[in - h] > temp) {
                while(in > h - 1 && this.compareValue(this.sort_array[in - h], temp) == 1){
                    this.sort_array[in] = this.sort_array[in - h];
                    this.assignCount++;
                    in -= h; // in = in –h;
                }
                this.sort_array[in] = temp;
                this.assignCount++;
                //this.display();
                // 動作確認用
            }
            h = (h - 1) / 3;
            // Knuth's interval sequence
        }
    }

OriginalShellSort.java ShellSortメソッド
    public void shellSort() {
        int in, out, temp, h;
        h = this.sort_array.length / 2;
        while (h < this.sort_array.length / 2)
            h = 2 * h - 1; // original interval sequence
        while (h > 0) {
            //System.out.println("h = " + h);
            // 動作確認用
            for (out = h; out < this.sort_array.length; out++) {
                temp = this.sort_array[out];
                this.assignCount++;
                in = out;
                //while (in > h - 1 && this.sort_array[in - h] > temp) {
                while(in > h - 1 && this.compareValue(this.sort_array[in - h], temp) == 1){
                    this.sort_array[in] = this.sort_array[in - h];
                    this.assignCount++;
                    in -= h; // in = in –h;
                }
                this.sort_array[in] = temp;
                this.assignCount++;
                //this.display(); // 動作確認用
            }
            h = h / 2 ;
            // original interval sequence
        }
    }

課題4
arraySize = 10の時
    InsertionSortX
    代入回数:   38
    比較回数:   27
    ソート時間: 0.0082[ms]
    ShellSort
    代入回数:   30
    比較回数:   15
    OriginalShellSort
    代入回数:   44
    比較回数:   22
    ソート時間: 0.0098[ms]
arraySize = 100の時
    InsertionSortX
    代入回数:   2432
    比較回数:   2330
    ソート時間: 0.201[ms]
    ShellSort
    代入回数:   684
    比較回数:   342
    ソート時間: 0.044999[ms]
    OriginalShellSort
    代入回数:   1006
    比較回数:   503
    ソート時間: 0.070299[ms]
arraySize = 1000の時
    InsertionSortX
    代入回数:   257381
    比較回数:   256376
    ソート時間: 4.8995[ms]
    ShellSort
    代入回数:   10914
    比較回数:   5457
    ソート時間: 0.5763[ms]
    OriginalShellSort
    代入回数:   16012
    比較回数:   8006
    ソート時間: 1.1086[ms]
arraySize = 10000の時
    InsertionSortX
    代入回数:   24603391
    比較回数:   24593387
    ソート時間: 32.6387[ms]
    ShellSort
    代入回数:   150486
    比較回数:   75243
    ソート時間: 10.5069[ms]
    OriginalShellSort
    代入回数:   240010
    比較回数:   120005
    ソート時間: 9.756[ms]
大体どのarraySizeにおいても、代入回数、比較回数、実行時間共にShellSortが一番優れており、OriginalShellSortが次に、InsertionSortXが次にという結果になった。
InsertionSortXが一番遅い理由としては、例えば(昇順にソートする場合)、小さな値が配列の後方にある場合は比較回数や代入回数がかなり多くなってしまう。
という様な挿入ソートの弱点が出てしまう為だと考えられる。
それに対して、シェルソートでは予め配列を大まかにソートしてから挿入ソートを行うので、最後に挿入ソートを実行する際の比較回数や代入回数は純粋な挿入ソートより少なくて済むと考えられる。
また、OriginalShellSortの問題点は大まかにソートする際の間隔にある。
例えば、arraySizeが10000のときの間隔hは、
ShellSortでは           
9841 -> 3280 -> 1093 -> 364 -> 121 -> 40  -> 13 -> 4  -> 1
OriginalShellSortでは   
5000 -> 2500 -> 1250 -> 625 -> 312 -> 156 -> 78 -> 39 -> 19 -> 9 -> 4 -> 2 -> 1
というようになり、hの更新回数はShellSort < OriginalShellSortとなるため、ShellSortの方が高速に動作すると考えた。
よって、OriginalShellSortの問題点は間隔hの決め方にあると考えられる。


結果2
G:\programing\java\Lesson21>java Lesson21_2
=== ascending  =============================
[0, 6, 12, 15, 24, 33, 41, 43, 45, 49]
- InsertionSortX -
0 6 12 15 24 33 41 43 45 49
Sort: true
assign count: 18
compare count: 9
- ShellSort -
0 6 12 15 24 33 41 43 45 49
Sort: true
assign count: 30
compare count: 15
- OriginalShellSort -
0 6 12 15 24 33 41 43 45 49
Sort: true
assign count: 44
compare count: 22
=== descending =============================
[44, 37, 34, 34, 34, 27, 26, 17, 9, 0]
- InsertionSortX -
0 9 17 26 27 34 34 34 37 44
Sort: true
assign count: 60
compare count: 44
- ShellSort -
0 9 17 26 27 34 34 34 37 44
Sort: true
assign count: 42
compare count: 20
- OriginalShellSort -
0 9 17 26 27 34 34 34 37 44
Sort: true
assign count: 56
compare count: 26
=== random     =============================
[16, 9, 24, 26, 3, 5, 18, 7, 19, 6]
- InsertionSortX -
3 5 6 7 9 16 18 19 24 26
Sort: true
assign count: 43
compare count: 32
- ShellSort -
3 5 6 7 9 16 18 19 24 26
Sort: true
assign count: 47
compare count: 28
- OriginalShellSort -
3 5 6 7 9 16 18 19 24 26
Sort: true
assign count: 57
compare count: 30

結果3
G:\programing\java\Lesson21>java Lesson21_3
=== ascending  =============================
- InsertionSortX -
Sort: true
assign count: 198
compare count: 99
sort time: 0.0159[ms]
- ShellSort -
Sort: true
assign count: 684
compare count: 342
sort time: 0.0503[ms]
- OriginalShellSort -
Sort: true
assign count: 1006
compare count: 503
sort time: 0.069401[ms]
=== descending =============================
- InsertionSortX -
Sort: true
assign count: 5133
compare count: 4948
sort time: 0.329501[ms]
- ShellSort -
Sort: true
assign count: 908
compare count: 494
sort time: 0.042801[ms]
- OriginalShellSort -
Sort: true
assign count: 1262
compare count: 664
sort time: 0.061[ms]
=== random     =============================
- InsertionSortX -
Sort: true
assign count: 2754
compare count: 2651
sort time: 0.1878[ms]
- ShellSort -
Sort: true
assign count: 1143
compare count: 755
sort time: 0.062101[ms]
- OriginalShellSort -
Sort: true
assign count: 1433
compare count: 875
sort time: 0.074401[ms]

