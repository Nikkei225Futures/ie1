課題1
Study03_1.java, Study03_2.javaでは、どちらかのHPが0になるまで(isEndメソッドがtrueになるまで)while文でループさせることで犬と猿の戦いをシミュレートした。

Monkey_1クラスでは、
Hpが0になったことを示すために、isEndメソッドを作成した。
isEndメソッドでは、フィールドにflag(boolean)を使い、hpが0になったらflagをtrueにする事で戦いが終わったかどうかを判定する。
attackメソッドはそのままpowerを出力した。
また、defendメソッドは、ダメージ計算を行うとともに、hpが0になったらflagをtrueに変える処理を入れた。

Dog_1クラスでもMonkey_1クラス同様に、isEndメソッドを使用した。
また、attackメソッドのクリティカル時の計算では床関数を用いた。

課題2
Animalクラスでは、
Dog_1クラスとMonkey_1クラスのフィールドを比較して、名前、体力、攻撃力、防御力が同じだったので、Animalクラスのフィールドにこれらを定義して、コンストラクタで初期化するようにした。
また、printStatusメソッドも同様に、名前, HP, 攻撃力, 防御力が共通しているので、これらを定義した。
その他、Dog_2クラス, Monkey_2クラスでフィールドを使用するために各フィールドのgetterを作成した。

Dog_2クラスでは、
会心率のフィールドのみを定義して、コンストラクタで初期化した。その他のフィールドはAnimalクラスのコンストラクタを使用して初期化した。
また、printStatusメソッドも同様に、会心率のみを出力し、その他はAnimalクラスのprintStatusメソッドを使用することでプログラムを短くした。
そして、Dog_1クラスのdefendメソッドとAnimalクラスのdefendメソッドは同じなので、attackメソッドのみを定義した。

Monkey_2クラスでは、
Dog_2クラス同様に、回避率のフィールドのみを定義した。
また、printStatusメソッドでは回避率のみを出力し、その他はAnimalクラスのメソッドを用いた。
そして、Monkey_1クラスのattackメソッドとAnimalクラスのattackメソッドは同じなので、defendメソッドのみを定義した。

このようにして重複するコードをできるだけ少なくすることで、
Dog_1クラスは56slocだったのに対し、Dog_2クラスは26slocに減少した。
また、Monkey_1クラスは56slocだったのに対し、Monkey_2は28slocに減少した。

また、コメントアウトを使用することで、プログラムを見やすくするように心がけた。